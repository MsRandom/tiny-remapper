plugins {
	id 'java-library'
	id 'maven-publish'
	id 'checkstyle'
	id 'com.diffplug.spotless' version '5.14.2'
	id 'com.github.johnrengelman.shadow' version '6.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.8.9'

def codevAttribute = Attribute.of("codev", Boolean)
def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

group = 'net.msrandom'
archivesBaseName = 'tiny-remapper'

repositories {
	mavenCentral()
}

dependencies {
	api 'org.ow2.asm:asm:9.3'
	api 'org.ow2.asm:asm-commons:9.3'
	implementation 'org.ow2.asm:asm-tree:9.3'
	implementation 'org.ow2.asm:asm-util:9.3'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

shadowJar {
	archiveClassifier = 'codev-fat'
}

test {
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
		exceptionFormat = 'full'
		events = ['passed', 'failed', 'skipped']
	}
}

jar {
	archiveClassifier = 'codev'

	manifest {
		attributes	'Implementation-Title': 'TinyRemapper',
					'Implementation-Version': archiveVersion,
					'Main-Class': "net.fabricmc.tinyremapper.Main"
	}
}

checkstyle {
	configFile = file("checkstyle.xml")
	toolVersion = '8.31'
}

spotless {
	ratchetFrom 'origin/master'

	java {
		licenseHeaderFile(rootProject.file('HEADER')).yearSeparator(', ')
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		String xml

		try {
			xml = new URL("${ENV.MAVEN_URL}${project.group.replace('.', '/')}/${archivesBaseName}/maven-metadata.xml").text
		} catch (FileNotFoundException ignored) {
			// Never published, safe to continue.
			return
		}

		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion

configurations.all {
	outgoing {
		attributes {
			attribute(codevAttribute, true)
		}
	}
}
